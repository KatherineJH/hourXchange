name: 배포 to EC2

on:
  push:
    branches: 
      - main

jobs:
  deploy-spring:
    runs-on: ubuntu-latest
    steps:
    - name: Spring Boot EC2 접속 및 배포
      uses: appleboy/ssh-action@v1.0.3
      env:
        DOTENV_FILE: ${{secrets.DOTENV_FILE}}
      with:
        host: ${{secrets.EC2_SPRING_HOST}} 
        username: ${{secrets.EC2_USERNAME}}
        key: ${{secrets.EC2_PRIVATE_KEY}}
        envs: DOTENV_FILE
        script_stop: true
        script: |
          cd /home/ubuntu/hourxchange/backend
          git reset --hard HEAD
          git pull origin main
          echo "$DOTENV_FILE" > .env
          set -a
          source .env
          set +a
          chmod +x gradlew
          ./gradlew spotlessApply
          ./gradlew clean build -x test
          sudo fuser -k -n tcp 8080 || true
          nohup java -jar build/libs/*SNAPSHOT.jar > ./output.log 2>&1 &

  deploy-flask:
    runs-on: ubuntu-latest
    needs: deploy-spring    # Spring Boot 배포 후 Flask 배포
    steps:
    - name: Flask EC2 접속 및 배포
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{secrets.EC2_FLASK_HOST}}    
        username: ${{secrets.EC2_USERNAME}}
        key: ${{secrets.EC2_PRIVATE_KEY}}
        script_stop: true
        script: |
          cd /home/ubuntu/hourXchange/flaskAPI
          git reset --hard HEAD
          git pull origin main
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          sudo fuser -k -n tcp 5000 || true
          nohup python main.py > ./flask_output.log 2>&1 &
