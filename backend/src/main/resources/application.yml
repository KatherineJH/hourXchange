spring:
  # .env (?? ??? ????)?? ${?} ??????? ?????.
  config:
    import: optional:file:.env[.properties]

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: 'jdbc:mysql://localhost:3306/${DB_NAME}?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true'
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

  jwt:
    secret: ${JWT_SECRET}

  security:
    oauth2:
      client:
        registration:
          naver:
            provider: naver
            client-name: naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: 'http://localhost:${SERVER_PORT}/login/oauth2/code/naver'
            authorization-grant-type: authorization_code
            scope: name,email
          google:
            provider: google
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: 'http://localhost:${SERVER_PORT}/login/oauth2/code/google'
            authorization-grant-type: authorization_code
            scope: profile,email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri:         https://nid.naver.com/oauth2.0/token
            user-info-uri:     https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri:         https://oauth2.googleapis.com/token
            user-info-uri:     https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

server:
  port: ${SERVER_PORT}

openapi:
  key: ${OPENAPI_KEY}

# ?? ? ?? ???? ?? ?? ??
#logging:
#	level:
#		spring.security.web: TRACE
#		spring.security.config: DEBUG
