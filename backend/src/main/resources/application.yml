spring:
  # redis 설정
  data:
    redis:
      host: ${REDIS_SERVER}        # Redis 호스트 (환경 변수)
      port: ${REDIS_PORT}          # Redis 포트 (환경 변수)
#      database: ${REDIS_DATABASE:0}  # 선택적 Redis 데이터베이스 번호 (기본값 0)
#      username: ${REDIS_USERNAME:}   # 인증이 필요한 경우 사용자명
#      password: ${REDIS_PASSWORD:}   # 인증이 필요한 경우 비밀번호
#      ssl:
#        enabled: ${REDIS_SSL_ENABLED:false} # SSL 사용 여부 (기본값 false)

  config:
    import: optional:file:.env[.properties]

  elasticsearch:
    uris: http://${BACKEND_SERVER}:${ELASTIC_PORT}
    connection-timeout: 5s
    read-timeout: 5s

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: 'jdbc:mysql://${DB_SERVER}:3306/${DB_NAME}?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true'
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      connection-timeout: 5000      # 5? ? ????
      validation-timeout: 3000
      maximum-pool-size: 2

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

  jwt:
    secret: ${JWT_SECRET}

  security:
    oauth2:
      client:
        registration:
          naver:
            provider: naver
            client-name: naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: '${OAUTH_SERVER}/login/oauth2/code/naver'
            authorization-grant-type: authorization_code
            scope: name,email
          google:
            provider: google
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: '${OAUTH_SERVER}/login/oauth2/code/google'
            authorization-grant-type: authorization_code
            scope: profile,email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

server:
  port: ${SERVER_PORT}

# 봉사정보
openapi:
  key: ${OPENAPI_KEY}

ip:
  backend: ${BACKEND_SERVER}
  frontend: ${FRONTEND_SERVER}

port:
  elastic: ${ELASTIC_PORT}

url:
  frontend: http://${FRONTEND_SERVER}
  elastic: http://${BACKEND_SERVER}:${ELASTIC_PORT}
  flask: http://${BACKEND_SERVER}:${FLASK_PORT}

# 결제 연동
iamport:
  api-key: ${IAMPORT_KEY}
  api-secret: ${IAMPORT_SECRET}

# ai챗봇
dialogflow:
  project-id: ${GCP_PROJECT_ID}
  language-code: ko-KR
  credentials-path: classpath:dialogflow-key.json

logging:
  level:
    spring.security.web: TRACE
    spring.security.config: DEBUG

# 서버 상태 체크
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always